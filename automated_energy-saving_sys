#include"WiFi.h"
#include"DHT.h"
#include"HTTPClient.h"
#include"time.h"
#include<ThingSpeak.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define pin 15
#define type DHT11

#define ssid "Benit"
#define pass "0501895309"
#define CSE_IP "192.168.113.10"
#define CSE_PORT 5089
#define OM2M_ORGIN "admin:admin"
#define OM2M_MN "/~/in-cse/in-name/"
#define OM2M_AE "ESP_Device"
#define OM2M_DATA_CONT "Node-1/Data"

#define RST_PIN         22         
#define SS_PIN          5      

#define LED 13

MFRC522 mfrc522(SS_PIN, RST_PIN);
int x;
int cnt1=0;
int cnt2=0;
int test;

HTTPClient http;
DHT dht(pin,type);

WiFiClient client;

static const int servoPin = 4;
Servo servo;

const char * ntpServer = "pool.ntp.org";

long int prev_millis = 0;
unsigned long ntime;

int status= WL_CONNECTED;

int wifistatus()
{
    Serial.print("\nWifi Disconnected");
    WiFi.begin(ssid,pass);
    ThingSpeak.begin(client);
    Serial.println("\nConnecting");
    while(WiFi.status()!=WL_CONNECTED)
    {
      Serial.print("..");
    }
    Serial.println("\nWifi connected");
  return 0;
}

void sprint(float h1, float t1)
{
  Serial.print("Humidity: ");
  Serial.print(h1);
  Serial.println("%\t");
  Serial.print("Temperature: ");
  Serial.print(t1);
  Serial.println("*f\t");
}

unsigned long myChannel_number=1941828;
const char * myWriteAPIKEY= "W2I5OGT96LW8ISNM";

unsigned long getTime() 
{ 
  time_t now;
  struct tm timeinfo;
    if (!getLocalTime( & timeinfo)) {
      Serial.println("Failed to obtain time");
      return (0);
    }
    time( & now);
    return now;
}

void ncount()
{
  if ( test ==1 )
  {
  cnt1=cnt1+1;
  return;
  }
}

void setup() 
{ 
  configTime(0, 0, ntpServer);
  Serial.begin(115200);
  delay(500);

   pinMode(LED, OUTPUT);

  servo.attach(servoPin);
  WiFi.begin(ssid,pass);
  while (WiFi.status() != WL_CONNECTED)
   {
    delay(500);
    Serial.print("#");
   }
  Serial.println("Board connected");
  Serial.print("lp address:");
  Serial.println(WiFi.localIP()) ;
  x=wifistatus();
  dht.begin();
  while (!Serial);    // Do nothing if no serial port is opened 
  SPI.begin();      // Init SPI bus
  mfrc522.PCD_Init();   // Init MFRC522
  delay (1000);
}


void loop() 
{ 
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
   test=1;
    Serial.print("Card Detected");
    digitalWrite(LED, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(1000);                       // wait for a second
    digitalWrite(LED, LOW);    // turn the LED off by making the voltage LOW
    delay(1000);  
    ncount();
    cnt2=cnt1%2;
   if (cnt2==0)
  {
  servo.detach();
  }
  if ( cnt2!=0)
  {
   servo.attach(servoPin);
   float hum = dht. readHumidity();
   float tempc = dht. readTemperature();
   static int i=0;

   if(isnan(hum)||isnan(tempc))
    {
      Serial.print("dht sensor not working");
      return;
    }
    ThingSpeak.setField(1,tempc);
    ThingSpeak.setField(2,hum);
    ThingSpeak.writeFields(myChannel_number, myWriteAPIKEY);

    if(x==0)
    {
     sprint(hum,tempc);
    }
    else 
     {
        do
       {
         x= wifistatus();
        }while( x==0);
     }

    if (tempc >=20)
    {
      servo.write(180);
    }

    if (millis() - prev_millis >= 2000) 
    {
    ntime = getTime();
      String data;
      String server = "http://" + String() + CSE_IP + ":" + String() + CSE_PORT + String() + OM2M_MN;
      data = "[" + String(ntime) + ", " + String(hum) + ", " + String(tempc)+ "]";
      Serial.println(data);
     
      http.begin(server + String() + OM2M_AE + "/" + OM2M_DATA_CONT + "/");

      http.addHeader("X-M2M-Origin", OM2M_ORGIN);
      http.addHeader("Content-Type", "application/json;ty=4");
      http.addHeader("Content-Length", "100");
    
    String req_data = String() + "{\"m2m:cin\": {"
        +
        "\"lbl\": \"" + "Esp32 humidity and Temperature" + "\","
        +
        "\"con\": \"" + data + "\","
        +
        "\"cnf\":\"text\""
        +
        "}}";

    int code = http.POST(req_data);
    http.end();
    Serial.println(code);
    prev_millis = millis();
    }
  }


  delay(5000);
}
